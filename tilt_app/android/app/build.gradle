plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

// Define expected environment variable names (updated to match the script)
def keyStoreFileEnv = System.getenv("MYAPP_KEYSTORE_FILE")
def keyStorePasswordEnv = System.getenv("MYAPP_KEYSTORE_PASSWORD")
def keyAliasEnv = System.getenv("MYAPP_KEY_ALIAS")
def keyPasswordEnv = System.getenv("MYAPP_KEY_PASSWORD")

// Optional: Check if the essential variables are set, particularly for release builds
def signingEnvVarsSet = keyStoreFileEnv != null && keyStorePasswordEnv != null && keyAliasEnv != null && keyPasswordEnv != null

if (!signingEnvVarsSet && gradle.startParameter.taskNames.any { it.toLowerCase().contains('release') }) {
    println("Warning: Signing environment variables (MYAPP_KEYSTORE_FILE, MYAPP_KEYSTORE_PASSWORD, MYAPP_KEY_ALIAS, MYAPP_KEY_PASSWORD) not set for release build.")
    // You could optionally throw an error here to fail the build if variables are missing for release:
    // throw new GradleException("Signing environment variables not set for release build.")
}

android {
    namespace = "com.tilthydrometer.app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.tilthydrometer.app"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = "7"
        versionName = "1.0.7"
    }

    signingConfigs {
        release {
            // Only configure signing if environment variables were found
            if (signingEnvVarsSet) {
                storeFile file(keyStoreFileEnv) // Read path from env var
                storePassword keyStorePasswordEnv    // Read password from env var
                keyAlias keyAliasEnv                 // Read alias from env var
                keyPassword keyPasswordEnv           // Read key password from env var
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // Apply signing config only if variables were set
            if (signingEnvVarsSet) {
                signingConfig signingConfigs.release
            }
        }
    }
}

flutter {
    source = "../.."
}

// dependencies {
//     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
// }